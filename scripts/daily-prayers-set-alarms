#!/usr/bin/env node

const fs = require('fs');
const http = require('http');
const { exec } = require('child_process');

const [vLat, vLong] = fs
      .readFileSync('/opt/daily-prayers/coordinates')
      .toString()
      .trim()
      .split(',');
const today = new Date();
const url=`http://api.aladhan.com/v1/timings/${today.getDate()}-${today.getMonth() + 1}-${today.getFullYear()}?latitude=${vLat}&longitude=${vLong}&method=2&school=1`;
const playScriptPath = '/usr/local/bin/daily-prayers-play-adhan';
const adhanPathFajr = '/opt/daily-prayers/adhans/Adhan-Fajr_Mishary-Rashid-Alafasy_-_Al-Kuwait.mp3';
const adhanPathRegular = '/opt/daily-prayers/adhans/Adhan_Mishary-Rashid-Alafasy_-_Al-Kuwait.mp3';

http
    .get(
        url,
        response => {
            let data = '';

            response.on(
                'data',
                chunk => {
                    data += chunk;
                }
            );

            response.on(
                'end',
                () => {
                    try {
                        const jsonData = JSON.parse(data);

                        const { data: { timings: { Fajr, Dhuhr, Asr, Maghrib, Isha } } } = jsonData;

                        const cronString = [
                            '0 0 * * * /usr/local/bin/daily-prayers-set-alarms',
                            `${Fajr.split(':').reverse().join(' ')} * * * ${playScriptPath} ${adhanPathFajr}`,
                            `${Dhuhr.split(':').reverse().join(' ')} * * * ${playScriptPath} ${adhanPathRegular}`,
                            `${Asr.split(':').reverse().join(' ')} * * * ${playScriptPath} ${adhanPathRegular}`,
                            `${Maghrib.split(':').reverse().join(' ')} * * * ${playScriptPath} ${adhanPathRegular}`,
                            `${Isha.split(':').reverse().join(' ')} * * * ${playScriptPath} ${adhanPathRegular}`,
                        ].join('\n');

                        exec(
                            `echo "${cronString}" | crontab -`,
                            (error, stdout, stderr) => {
                                if (error) {
                                    console.error(`Error executing command: ${error.message}`);
                                    return;
                                }

                                if (stderr) {
                                    console.error(`Error output: ${stderr}`);
                                    return;
                                }
                            }
                        );

                    } catch (error) {
                        console.error('Error parsing JSON:', error);
                    }
                }
            );
        })
    .on(
        'error',
        error => {
            console.error('Error making HTTP request:', error);
        }
    );
